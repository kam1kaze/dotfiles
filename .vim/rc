set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'irgeek/vim-puppet' " Original: 'rodjek/vim-puppet'; require syntastic, ultisnips, tabular
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/syntastic'
Plugin 'honza/vim-snippets'
Plugin 'vim-ruby/vim-ruby'
Plugin 'SirVer/ultisnips'
Plugin 'gregf/ultisnips-chef'
"if v:version > 703 || (v:version == 703 && has('patch584'))
  Plugin 'Valloric/YouCompleteMe'
"endif
"Plugin 'TheLocehiliosan/vim-json' " with comment support, original 'elzr/vim-json'

"Plugin 'airblade/vim-gitgutter'
"Plugin 'The-NERD-Commenter'
"Plugin 'vimux'
Plugin 'BufOnly.vim'
Plugin 'wincent/command-t'
Plugin 'lambdalisue/vim-gita'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'altercation/vim-colors-solarized'
Plugin 'lifepillar/vim-solarized8'
" Python
Plugin 'klen/python-mode'
" Ansible
Plugin 'pearofducks/ansible-vim'
" Markdown
Plugin 'plasticboy/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

""" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" Disable syntastic during vimdiff run
"let g:syntastic_ignore_files = ['_\(REMOTE\|LOCAL\|BASE\)_[0-9]\+\.']
if &diff
  let g:syntastic_check_on_open = 0
endif

let g:syntastic_debug = 0

" Disable auto-indentation for .erb files
autocmd FileType eruby setl indentexpr =
" Disable warnings for .erb files
autocmd FileType eruby let g:syntastic_eruby_ruby_quiet_messages =
  \ { 'regex': '^possibly useless use of a variable in void context$' }

" Puppet
let g:syntastic_puppet_puppetlint_args = '--no-class_inherits_from_params_class-check --no-80chars-check'

" Ruby
let g:syntastic_ruby_checkers = [ 'mri', 'rubocop' ]
let g:syntastic_ruby_rubocop_exec = '~/bin/rubocop.sh'

" Yaml
let g:syntastic_yaml_checkers = [ 'yamllint' ]

" Ansible
autocmd BufNewFile,BufRead Ansiblefile set filetype=ruby
autocmd BufNewFile,BufRead */hosts/* set filetype=dosini

" Python
let g:pymode_lint_ignore="E501"
let g:pymode_rope=0 " https://github.com/klen/python-mode/issues/537

""" Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

let g:UltiSnipsListSnippets="<c-e>"

autocmd BufRead,BufNewFile */recipes/*.rb set filetype=ruby.eruby.chef

""" Python-mode
let g:pymode_breakpoint = 0

""" vim json plugin
let g:vim_json_syntax_conceal = 0
let g:vim_json_comments = 1

""" General settings
set wildmenu
set number
set hidden
set colorcolumn=150 " Line length highlighting
set diffopt=filler,vertical
set autoread
set mouse=a

" Copy buffer to system clipboard
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p

" Colors
"set t_Co=256
syntax enable
colorscheme solarized8_dark_high

" From https://github.com/rakr/vim-one
" Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
" If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
" (see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
" For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
" Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
"if (has("termguicolors"))
"  set termguicolors
"  if (exists($TMUX))
"    " https://github.com/lifepillar/vim-solarized8
"    set t_8f=[38;2;%lu;%lu;%lum
"    set t_8b=[48;2;%lu;%lu;%lum
"    "let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"    "let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"  endif
"endif

" Set tab size
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent

" Add full file path to your existing statusline
set statusline+=%f
set laststatus=2

" Extend dir tree :Explorer
let g:netrw_liststyle=3

" Allow backspacing everything in insert mode
set backspace=2

" Show tab numbers
if exists("+showtabline")
     function! MyTabLine()
         let s = ''
         let t = tabpagenr()
         let i = 1
         while i <= tabpagenr('$')
             let buflist = tabpagebuflist(i)
             let winnr = tabpagewinnr(i)
             let s .= '%' . i . 'T'
             let s .= (i == t ? '%1*' : '%2*')
             let s .= ' '
             let s .= i . ')'
             let s .= ' %*'
             let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
             let file = bufname(buflist[winnr - 1])
             let file = fnamemodify(file, ':p:t')
             if file == ''
                 let file = '[No Name]'
             endif
             let s .= file
             let i = i + 1
         endwhile
         let s .= '%T%#TabLineFill#%='
         let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
         return s
     endfunction
     set stal=2
     set tabline=%!MyTabLine()
endif

" Enable powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

" Shortcuts to vimdiff
" http://stackoverflow.com/questions/7309707/why-does-git-mergetool-opens-4-windows-in-vimdiff-id-expect-3
let mapleader=','
let g:mapleader=','

if &diff
   map <leader>1 :diffget LOCAL<CR>
   map <leader>2 :diffget BASE<CR>
   map <leader>3 :diffget REMOTE<CR>
endif
